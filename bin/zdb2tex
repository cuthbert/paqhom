#!/usr/bin/perl

=head1 NAME

zdb2tex - extract contents of zdbfile and output LaTeX source

=head1 SYNOPSIS

zdb2tex [OPTION]... [COMMAND] [ARGUMENT]... [<] ZDBFILE

=head1 DESCRIPTION

FIXME

=head1 OPTIONS

=over 4

=item B<-h>, B<--help>

Prints the synopsis and a lists all zdb2tex-commands. If a zdb2tex-command is
named this option will display the manual description for that command.
(Internally C<zdb2tex COMMAND --help> is converted to C<zdb2tex help COMMAND>.)

=item B<-o>, B<--orphan>=I<NUMBER> (default: 6)

Adjusts the NUMBER of characters in which linebreaks are suppressed at the very
end of each dictionary entry.

To avoid that a very short word at the end of a dictionary entry wind up on a
line of its own linebreaking is suppressed for the last NUMBER of characters in
each dictionary entry. (I.e. spaces are replaced by the LaTeX non-breaking
space symbol "~" in this part of the text.)

=back

=cut

# [2002-01-21, 17.58-21.12]
#
# [2002-01-22, 07.29-14.37]
#
# [2002-01-25,~19.00-19.44] Now ZDb is specified on command line, instead of
# hardcoded. Also LaTeXifies the $extra field (previously the hyphen did not
# get translated into a correct LaTeX hyphen (i.e. minus) which resulted in an
# ugly black square instead. (This occured once in the dictionary.)
#
# [2010-05-11] Made it work with modern-day zdb, using unicode. Very
# rudimentary update, still up not to my current code standard
#
# [2010-05-13, 19:52-23:49] made to work with "use warnings" & "use stict";
# fixed proper identation; now accepts input on STDIN; started restructuring
# code by breaking it down into more easy-to-read subroutines; replaced old
# lower() function call with lc() (works fine with Swedish characters under
# modern Perl/UTF8); other minor cleanups
#
# [2010-05-17] used "perltidy" to clean up source code formatting
#
# [2010-05-19] cleaned up english-klingon conversion code by breaking it down
# into smaller units and creating functions for them
#
# [2010-05-23] moved all program-specific logic into functions (made so that
# all command line subcommands got their own cmd_* function); added help() from
# my userdb script (it's not well written but gets the job done)

# TODO
#
#   o source output should include SHA1 & dates of all involved sources
#     (dictionary, this program's source code, any other relevant files) so
#     that one, at any future date, may use the git repo to match up a specific
#     compiled version of the dictionary with a specific version of the
#     original database
#   o Don't use "date" command to get current time, use Perl built-in
#   o Don't sort using lemma number in klingon_sortkey() lemma numbers aren't
#     shown in the dictionary anyway
#   o Klingon-English side should include some multiple entry lookup words, but
#     how should this be shown in the dictionary? (E.g. {bang «bom»} should be
#     found under both {bang bom} and {bom}.)
#   o Make sure sortkeys aren't produced from LaTeXified strings.
#   o Put output into hash with sortkey as key.
#   o Non-breaking spaces at end of entry:
#     * Klingon-English side: Maybe not needed at all in for entries that have
#       a source reference? (seems to look good in pocket dict, regardless of
#       how short the source reference is -- they are never shorter than five
#       letters anyway, e.g. "[TKD]")
#     * English-Klingon side: (Have no source reference.) Maybe non-breaking
#       spaces should be introduced in a shorter ending substring than the
#       current six letters? What looks good? And how much many pages shorter
#       does the dictionary become dictionary by decreasing this number?
#

use strict;
use warnings;

my %arg = (orphan => 6);

# see open(3perl), encoding(3perl)
use utf8;

use Encode;

binmode(STDOUT, ':utf8');

sub FALSE { '' }
sub TRUE  { 1 }

# define alphabet
# string = regex that matches klingon letter
# array  = sort order
# hash   = letter to sort-letter
sub prepare_klingon_alphabet() {
    my @alpha = (
        " ",                                   # <space>
        qw(a b ch D e gh H I j l m n ng o p q Q r S t tlh u v w y),
        "'",                                   # glottal stop
    );
    my $i;
    my %alpha = ();
    foreach my $letter (@alpha) { $alpha{$letter} = chr 96 + $i++ }  # produce sort order hash
    return ("(tlh|ch|gh|ng|[abDeHIjlmnopqQrStuvwy' ])", %alpha);
}

our %configuration = (
    # English part-of-speech label
    en_pos => '\((v|n|name|pro|adv|num|excl|ques|conj)\)',
    # Swedish part-of-speech label
    sv_pos => '\((v|s|namn|pro|adv|räkn|interj|fråg|konj)\)',
    # German part-of-speech label
    de_pos => '\((V|N|Name|Pro|Adv|räkn|Ausruf|Frage|Konj)\)',
    # ZDB fields to extract from database
    zdb_fields => '^(tlh|en|sv|de|def|pos):\s*',
);

my $az = 'A-ZÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝÞ';
$az .= lc($az) . "ßÿ";

my %language_key_translations = (
    "en"  => "English",
    "tlh" => "Klingon",
    "de"  => "German",
    "sv"  => "Swedish"
);

my %word_type_map = (
    "noun"          => "n",
    "verb"          => "v",
    "exclamation"   => "",
    "name"          => "",
    "adverbial"     => "",
    "pronoun"       => "",
    "numeral"       => "",
    "question word" => "",
    "conjunction"   => ""
);

my %debug = (
    "unknown_pos" => ()
);

###############################################################################
##                                                                           ##
##  Subcommand Functions                                                     ##
##                                                                           ##
###############################################################################

=head1 ZDB2TEX COMMANDS

=over 4

=item help [COMMAND]

Display help information about zdb2tex. If no COMMAND is given, displays a list
of possible COMMANDs. If a COMMAND is specified, displays some more info about
that particular command.

FIXME help() could be cleaner, and more readable, but it'll do for now

=cut

sub command_help {
    my ($command) = @_;
    if (defined($command)) {                       # user asked for a command
        my @text = ();
        use Cwd "realpath";
        foreach (read_file(realpath($0))) {    # extract relevant "=item"
            if (@text or s/^ =item \s+ (?=\b $command \b) //x) {
                last if m/^ =cut \b/x;
                push @text, $_;
            }
        }
        die("'$command' is not a %s-command. See '%s --help'\n") unless @text;

        # strip trailing blank lines
        while (@text and $text[$#text] =~ m/^\s*$/) { pop(@text) }

        # ident any =over/=back constructions
        my $text = join("", @text);
        $text =~ s{ ^=over[^\n]*\n+ (.*?) ^=back [^\n]*\n+ }{
            my $ind = $1;
            $ind =~ s/^(?!$)/    /mg;
            $ind =~ s/^ [ ]+ =item \s+ ([^\n]*)\n+/  $1\n/gmx;
            $ind =~ s/\n{2,}/\n\n/mg;
            $ind;
        }xsme;
        $text =~ s/ B< ([^>]*) >/"$1"/xg;
        @text = split("\n", $text);
        print $text;
    } else {
        use Cwd "realpath";
        local $_ = read_file(realpath($0));

        my @desc = ();
        m/=head1 SYNOPSIS\n+([^\n]*)\n+/ and push @desc, "Usage: $1";
        m/=head1 NAME\n+(?:[^-\n]*-\s+)?([^\n]*)\n+/ and push @desc, "\u$1.";

        # list of --options (from comments)
        my @opt = ();
        push @opt, $1 while m/^[\t ]*\#\#([^\n#]*)$/xgm;

        # list of subcommands (from POD)
        my @commands = ();
        s/^=head1 LDAP[^\n]*ATTRIBUTES.*//sm;
        my @text = ();
        while (m/^(=item\s+ ([a-z]\S+)[^\n]* .*? \n\n+([^=][^,.\n]*))/gmsx) {
            my ($all, $cmd, $desc) = ($1, $2, $3);
            next if $all =~ m/TYPE=/;          # spec for "search"
            my $warn = ($desc =~ s/^\*// ? "*" : "");
            push @text, sprintf "   %-13.13s %1s%s", $cmd, $warn, $desc;
        }
        # add other text to output
        print map { "$_\n" } @desc, "",
          "Subcommands:", sort(@text), "",
          "Options:", @opt, "",
          program_name("See '%s help SUBCOMMAND' for more information on a specific subcommand."),
          program_name("See '%s help attr' for more information on the LDAP attributes.");
    } ## end else [ if (defined($cmd)) ]
} ## end sub cmd_help

=item man

Display "zdb2tex" manpage. This extracts the inline POD documentation from
zdb2text's Perl source and displays it using man(1).

=cut

sub cmd_man {
    use Pod::Usage;
    pod2usage(-verbose => 2);
}

=item en-tlh

Generate English-Klingon dictionary text.

=cut

sub cmd_en_tlh {
    process_dictionary("en", "tlh", @_);
}

=item tlh-en

Generate Klingon-English dictionary text.

=cut

sub cmd_tlh_en {
    process_dictionary("tlh", "en", @_);
}

=item run

Generate Language-Language dictionary text.

=cut

sub cmd_run {
    my ($origin_lang, $target_lang, $input_db_path) = @_;
    process_dictionary($origin_lang, $target_lang, $input_db_path);
}


=back

=cut

###############################################################################
##                                                                           ##
##  Functions                                                                ##
##                                                                           ##
###############################################################################

# Usage: { $TEXT | @TEXT } = read_file($FILE);
#
# Reads $FILE. In string context returns all of file as one $TEXT, in list
# context returns all of file, separated by lines in @TEXT. die()s if $FILE
# couldn't be read.
sub read_file {
    my ($file) = @_;
    open(my $fh, "<", $file)
      or die("failed to open file '$file' for reading: $!\n");

    return <$fh> if wantarray();
    return join("", <$fh>);
}

# Usage: $STRING = program_name($INSTRING);
#
# Replace all occurances of "%s" in $INSTRING with program name (excluding
# path).
sub program_name {
    my ($text) = @_;
    my $name = $0;                             # program name
    $name =~ s#.*/##;                          #   strip path
    $text =~ s#%s#$name#g;

    return $text;
}

sub is_number {
    local ($_) = @_;
    m/^\d+/;
}

# @WORDS = lookup_words($STRING);
#
# Extract all lookup words in $STRING.
#
# Lookup word are marked with <...> and may be nested (e.g. <... <...>>).
sub lookup_words {
    my ($string) = @_;
    #return $string if $string !~ m/[«<]/;
    $string =~ tr/«»{}/<><>/;
    my (@return, @stack) = ();
    my $beg = pos($string) = 0;
    while ($string =~ /</g) {                  # find next `<'
        $beg = pos($string);                   # beg of this definition
        push @stack, ">";                      # stack it
        my $len;
        do {                                   # until stack is empty
            $string =~ /([<>])/g;              #   find next `<' or `>'
            if ($1 eq $stack[$#stack]) {       #   if equal to on stack
                pop @stack;                    #     pop it
            } else {                           #   otherwise
                push @stack, ">";              #     push `>'
            }
            $len = pos($string) - $beg - 1;    #   length of lookup word
        } while @stack;
        push @return, substr($string, $beg, $len);  # lookup word
    } continue {
        pos($string) = $beg;
    }

    return @return;
} ## end sub lookup_words

# Usage: process_dict($DIRECTION);
#
# Reads input using diamond operator (<>), produces output on STDOUT.
# $DIRECTION is either "tlh-en" or "en-tlh".
#
# Input should be in zdb format. Output will be LaTeX.
sub process_dictionary {
    (my $origin_language, my $target_language, @ARGV) = @_;

    # open file and skip header
    while (<>) {                               # skip past data file header
        last if /^=== start-of-word-list ===$/;
    }

    # read from the dictionary
    my (@buf, @file) = ();
    while (<>) {
        chomp;                                 # remove eol
        last if /^=== end-of-word-list ===$/;  # done at end-of-dict

        # beginning of a new post
        if (s/^(:|\s*$)//) {                   # beginning of new post?
            push @file, buffer_to_latex(       #   output processed buffer
                $origin_language, $target_language, @buf,
            );
            @buf = ();                         #   clear buffer
            next if /^$/;                      #   skip to next line in file
        }                                      #   if this one is empty now

        # add read line to buffer
        if (m/^\s+(.*)/) {                     # initial space: add to last line
            $buf[$#buf] .= " " . $1;
            next;
        }

        push @buf, $_;                         #   add new line to buffer
    } ## end while (<>)

    # output main body of file
    print latex_header($origin_language, $target_language, $#file + 1);
    my ($oldfirst, $first) = ("", "");
    foreach (sort @file) {
        ($first) = /^(.)/;                     # get sortstring's 1st letter
        print "\\newletter{}%\n"               # new letter in alphabet
          if $first ne $oldfirst;
        s/[^ ]* //;                            # remove sortstring
        print "  $_";                          # output
    } continue {
        $oldfirst = $first;                    # remember 1st letter
    }
    print latex_footer();
} ## end sub process_dict

# Usage: $LATEX = process_tlh($KLINGON);
#
# Converts "tlh:" data to LaTeX for inclusion in the pocket dictionary.
# $KLINGON should not contain the "tlh:" header, only the daca from the field.
# One pair of curly brackets are removed from $KLINGON before its
# LaTeXification.
sub process_tlh {
    my ($klingon) = @_;
    $klingon =~ s/^.*{(.*)}.*/$1/;               # remove all outside {...}

    return latexify($klingon);
}

# Usage: $LATEX = process_ref($REFERENCE);
#
# Converts "def:" data to LaTeX for inclusion in the pocket dictionary.
sub process_reference {
    my ($reference) = @_;
    for ($reference) {
        s/\[(.*)\]/$1/;                        # remove brackets
        s/\s*\(.*\)//g;                        # remove parenthesis w/ contents
        s/^TKD$//;                             # clear if "TKD"
    }
    $reference = latexify($reference);
    $reference = non_breaking_space_at_end($reference, $arg{orphan});

    return $reference;
}

# split `en:'-field into:
#   `English', `part-of-speech' and `slang/regional'
sub split_entry {
    my ($string) = @_;

    my ($english, $extra) =
      $string =~ /([^\[\]]*)(?:\[(.*)\])?/;       # fetch transl. & extra
    $english  =~ s/ *$//;                      # remove trailing space
    $extra = latexify($extra);                 # LaTeXify

    return ($english, $extra);
}

# remove «»<> from string
sub remove_angle_brackets {
    my ($string) = @_;
    $string =~ s/[<>«»]//g;

    return $string;
}

# tilde implosion
sub replace_lookup_word_with_tilde {
    my ($lookup, $english) = @_;
    $english =~ s{
        (?:^|(?<=[ ]))                         # space or beg-of-string
        \Q$lookup\E                            # lookup word
        (?=$|[, ])                             # end-of-string or
    }{×}gx;                                    # tilde ("×") replacement

    return $english;
}

# tilde removal (of parts w/ only tilde as transl.)
sub remove_tilde_only_parts {
    my ($xng) = @_;
    $xng = join ', ', grep {                   # remove all part-definitions
        !/^×$/;                                #   containing only "×"
    } split(', ', $xng);
    return $xng;
}

# multiple `be' removal
#
# If all english comma separated definitions begin with the word 'be' remove
# `be' in all but the first one.
sub remove_multiple_be {
    my ($english) = @_;
    # count definitions which does *not* begin with "be"
    my $count = do {
        my $english2 = $english;
        $english2 =~ s/\(.*\)//g;              # disregard parenthesis contents
        grep !/^be /, split(', ', $english2);  # use "grep" to count
    };
    if ($count == 0) {                         # all fields began with "be"
        $english =~ s/, be /, /g;              #   replace ", be " with ", "
    }
    return $english;
}

# Usage: $STRING = non_breaking_space_at_end($STRING, $LENGTH);
#
# Replaces all spaces occuring within the lastt $LENGTH characters of $STRING
# with "~" (the LaTeX symbol for a non-breaking space). This is used make very
# short words not occur on a line of their own at the end of paragraphs (the
# non-breaking space will "drag" the previous word down do the last line with
# them).
sub non_breaking_space_at_end {
    my ($string, $length) = @_;
    return $string if $length <= 0;
    substr($string, -$length) =~ s/ /~/g;      # "~" instead of space at end
    return $string;
}

sub english_klingon_sortkey {
    my ($english, $pos, $klingon, $english_long) = @_;
    return join("_",
        english_sortkey($english),
        $pos,
        klingon_sortkey($klingon),
        english_sortkey($english_long));
}

# Usage: $SORTKEY = klingon_english_sortkey($KLINGON, $PART-OF-SPEECH);
#
# $SORTKEY is generated from $KLINGON (based on Klingon alphabetical order),
# with $PART-OF-SPEECH appended (so that identical Klingon words get sorted
# among themselves by their $PART-OF-SPEECH).
#
# $SORTKEY is fit for use in any (normal) alphabetical perl sort() operation.
sub klingon_english_sortkey {
    my ($klingon, $pos, $english) = @_;
    my ($tlh, $lemma) = klingon_sortkey($klingon);
    return join("_", $tlh, $pos, $lemma, english_sortkey($english));
}

sub english_sortkey {
    my ($english) = @_;
    for ($english = lc($english)) {
        s/\s*\(.*?\)//g;
        tr/«»<>{}~\' -//d;                     # remove interpunct
        tr/àáâãäèéêëìíîïòóôõöùúûüýÿ/aaaaaeeeeiiiiooooouuuuyy/;
    }
    return $english;
}

sub klingon_sortkey {
    my ($klingon) = @_;
    my ($klingon_alphabet_regex, %klingon_alphabet_position_map) = prepare_klingon_alphabet();
    $klingon =~ s/\[(\d+)\]//;
    my $lemma_number = defined($1) ? $1 : 1;
    $klingon =~ s/[<>«»{}() ]//g;              # remove <space> <>«»{} and ()
    $klingon =~ s/($klingon_alphabet_regex)/$klingon_alphabet_position_map{$1}/g;
    if (wantarray()) {
        return $klingon, $lemma_number;
    }
    return $klingon;
}

# Arguments for LaTeX function \lueng{} (a English-Klingon dictionary entry)
#
#   #1 = English lookup word                (done)
#   #2 = Klingon word                       (done)
#   #3 = Part-of-speech                     (done)
#   #4 = 'slang' or 'regional' etc.         (done)
#   #5 = English explanation of the word
#        (if Ø then the explanation equals the lookup word)
#        (the lookup word is replaced by \lemma{}, which generates a tilde)
sub arbitrary_language_to_klingon {
    my ($klingon_word, $non_klingon_word, $pos, $arbitrary_language_key) = @_;
    my $tlh = process_tlh($klingon_word);
    my ($en, $extra) = split_entry($non_klingon_word);

    # process `tlh:'-field
    $tlh = remove_angle_brackets($tlh); # @TODO: Is this necessary?

    # generate a dictionary entry for each lookup word
    return map {
        s/\s*\(.*\)//g;                        # erase parenthesis in lookupword

        # English definition
        my $main   = "";
        my $lookup = latexify(remove_angle_brackets($_));
        if ($en ne $_) {
            $main = latexify(remove_angle_brackets($en));
            $main = replace_lookup_word_with_tilde($lookup, $main);
            $main = remove_tilde_only_parts($main);
            $main = remove_multiple_be($main); # remove word "be"
            $main = non_breaking_space_at_end($main, $arg{orphan});
            $main =~ s/×/\\lemma{}/g;          # "~" -> "\lemma{}"
        }

        english_klingon_sortkey($_, $pos, $tlh, $non_klingon_word)
          . " \\lueng{$lookup}{$tlh}{$pos}{$extra}{$main}%\n";
    } lookup_words($en);
} ## end sub english_klingon

# Arguments for LaTeX function \lukli{} (a Klingon-English dictionary entry)
#
#  #1 = Klingon (lookup) word
#  #2 = part-of-speech
#  #3 = 'slang' or 'regional' etc.
#  #4 = English explanation of the word
#  #5 = source (if Ø then source=TKD)
sub klingon_to_arbitrary_language {
    my ($klingon_word, $non_klingon_word, $ref, $pos, $arbitrary_language_key) = @_;
    my $tlh = process_tlh($klingon_word);
    my ($en, $extra) = split_entry($non_klingon_word);

    #    warn ">$tlh< ->\n", map { "    >$_<\n" } lookup_words($tlh);

    $ref = process_reference($ref);
    $en = remove_angle_brackets($en);

    if ($arbitrary_language_key =~ "en") {
        # process `en:'-field
        $en = remove_multiple_be($en);             # remove word "be"
    } elsif ($arbitrary_language_key =~ "de") { # example
        # remove 'sein' at the end?
    } elsif ($arbitrary_language_key =~ "sv") {
    }

    $en = latexify($en);

    # consider source reference length when adding non-breaking spaces
    # (since source reference comes after on same line)
    $en = non_breaking_space_at_end($en, $arg{orphan} - length($ref));

    # FIXME could be neater
    return map {
        # process `tlh:'-field
        my $lookup = remove_angle_brackets($_);
        klingon_english_sortkey($klingon_word, $pos, $non_klingon_word)
          . " \\lukli{$lookup}{$pos}{$extra}{$en}{$ref}%\n";
    } $tlh;                                    #lookup_words($tlh);
} ## end sub klingon_english

sub latex_header {
    my ($origin_language, $target_language, $words) = @_;

    return
      "% -*- tex -*-\n",
      "%\n",
      "% $language_key_translations{$origin_language}-$language_key_translations{$target_language} dictionary.\n",
      "% LaTeX conversion started: " . `date +"%Y-%m-%d, %H:%M:%S"`,
      "% There are $words words in this file.\n\n";
}

sub latex_footer {
    my ($origin_language, $target_language, $words) = @_;

    return
      "% LaTeX conversion ended: " . `date +"%Y-%m-%d, %H:%M:%S"`,
      "% [eof]\n";
}

sub latexify {
    my ($x) = @_;
    foreach ($x) {
        s/{/\\B{/g;                            # bold    {...} => \B{...}
        s/~([^~]*)~/\\I{$1}/g;                 # italics ~...~ => \I{...}
        s/''/'{}'/g;                           # double aphostrophe
        s/(^| )\"/$1``/g;                      # initial quote
        s/\"/''/g;                             # ending quote
        s/\.\.\. /\ldots\ /g;                  # ... + <space>
        s/\.\.\./\ldots/g;                     # ...
        s/ /~/g;                               # non-breaking space
        s/¿?//g;                               # remove ¿?
        s/([%#\$])/\\$1/g;                     # escape %, #, $
    }
    return $x;
}

sub buffer_to_latex {
    my ($origin_language, $target_language, @buf) = @_;                # get buffer

    return () unless @buf;                     # don't process empty buffers

    # get fields
    my %field = ();                            # clear %field hash
    foreach (grep /$configuration{zdb_fields}/o, @buf) {
        s/$configuration{zdb_fields}//o;                 #   remove `xxx:\t'
        $field{$1} = Encode::decode_utf8($_);                       #   assign to %field
    }

    if (exists $word_type_map{$field{pos}}) {
        $field{pos} = $word_type_map{$field{pos}};
    }

    if ($origin_language =~ "tlh") {
        # From Klingon to selected language direction
        return klingon_to_arbitrary_language($field{tlh}, $field{$target_language}, $field{def}, $field{pos}, $target_language);
    } else {
        # From selected language to klingon direction
        return arbitrary_language_to_klingon($field{tlh}, $field{$origin_language}, $field{pos}, $origin_language);
    }
}

###############################################################################
##                                                                           ##
##  Initialization                                                           ##
##                                                                           ##
###############################################################################

local %SIG = (
    __DIE__ => sub { print STDERR program_name("%s: @_"); exit 255 },
    __WARN__ => sub { print STDERR program_name("%s: @_") },
);

{
    my $bad = FALSE;
    my @arg = ();
    while (@ARGV) {
        my $opt = shift(@ARGV);
        unshift(@ARGV, $1) if $opt =~ s/=(.*)$//;

        use feature ":5.10";
        given ($opt) {
            when (m/^--$/) { last }
            ##   -h, --help           display this help and exit
            when (m/^(-h|--help)$/) { unshift(@arg, "help") }
            ##   -o, --orphan=NUMBER  disable line breaks in last NUMBER of
            ##                        characters in each dictionary entry
            when (m/^(-o|--orphan)$/) {
                my $arg = shift(@ARGV);
                if (not is_number($arg)) {
                    warn "unknown arg '$arg' for '$_', must be number\n";
                    $bad = TRUE;
                } else {
                    $arg{orphan} = $arg;
                }
            }
            m/^-/ and do {
                warn "unknown option '$_'\n";
                $bad = TRUE;
                next;
            };
            default { push @arg, $_ }
        } ## end given
    } ## end while (@ARGV)
    $bad and exit 5;
    unshift @ARGV, @arg;
}

###############################################################################
##                                                                           ##
##  Main Program                                                             ##
##                                                                           ##
###############################################################################
if (not @ARGV) {
    command_help();
    exit 5;
}

# get command line args
my ($command, @arguments) = @ARGV;

# name of sub to call
(my $sub = "cmd_$command") =~ s/-/_/g;
if (not defined(&$sub)) {
    die "'$command' is not a %s-command. See '%s --help'.\n";
}

# to allow name of a sub to be used as a subroutine ref, we disable refs
# checking here (only disabled in this scope, not in the functions called)
no strict "refs";                              # allow sub names as refs
&$sub(@arguments);                                   #   call function

#[eof]
